require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Scanner

  def initialize
    super(
      'Name'        => 'Custom Port Scanner',
      'Description' => 'Scans a range of ports on a target system to identify open ones',
      'Author'      => ['YourName'],
      'License'     => MSF_LICENSE
    )

    register_options(
      [
        Opt::RHOST(),
        OptInt.new('STARTPORT', [true, 'Start of port range', 1]),
        OptInt.new('ENDPORT', [true, 'End of port range', 1024])
      ]
    )
  end

  def run_host(ip)
    open_ports = []

    (datastore['STARTPORT']..datastore['ENDPORT']).each do |port|
      begin
        connect(false, { 'RPORT' => port })
        print_good("#{ip}:#{port} - Port #{port} is open on #{ip}")
        open_ports << port
      rescue Rex::ConnectionError
        # silently ignore closed ports
      ensure
        disconnect
      end
    end

    if open_ports.any?
      print_status("Open ports on #{ip}: #{open_ports.join(', ')}")
    else
      print_status("No open ports found on #{ip} in range #{datastore['STARTPORT']} - #{datastore['ENDPORT']}")
    end
  end
end
